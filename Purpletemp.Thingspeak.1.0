// Include required libraries
#include <ESP8266WiFi.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <ThingSpeak.h>


// Define pins for data. Sensor data on "D4"
#define ONE_WIRE_BUS 2
#define CLOUD_DELAY  20000   

// Initialize onewire
OneWire oneWire(ONE_WIRE_BUS);              // BUS means more sensors can be connected. Sensor on D4
DallasTemperature sensors(&oneWire);  

// Temperature sensor  
boolean TempSensorAvailable = false;
DeviceAddress TempSensor;
float tempC;     

// API key and WiFi information
String     apiKey = "V1IHZ19P023L3BOP";    // The WRITE API key from Thingspeak.com - V1IHZ19P023L3BOP
const char*ssid = "Tilgin-7U5qBDddpQHY";   // WiFi ssid
const char*password = "7azUDuakUkPCF";     // WiFi password
const char*server = "api.thingspeak.com";                    // api.thingspeak.com
int        sent = 0;
const int  sleepTimeS = 60;                // Set to seconds //Deep sleep

WiFiClient client;                         // ESP8266 WiFi library

void setup() {

  
  Serial.begin(115200);                   // Wemos D1 mini pro runs 115200
  delay(10);

  WiFi.begin(ssid, password);

  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
  
  
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("");
  Serial.println("IP");
  Serial.println(WiFi.localIP());
  Serial.println("");

  }

  else { 

  Serial.println("Connection failed");
   ESP.restart();
  }



 sensors.begin(); 

  Serial.print("Found ");
  Serial.print(sensors.getDeviceCount(), DEC);  // More sensors can be connected to the BUS. In this example only one sensor is used
  Serial.println(" OneWire device(s).");

  if (!sensors.getAddress(TempSensor, 0)) {
    Serial.println("No OneWire Device Found");
  } else {
    TempSensorAvailable = true;
    Serial.println("OneWire Device Found");
    sensors.setResolution(TempSensor, 12);
  }
}

void loop() 
  
  {

  {  
  sensors.requestTemperatures();          // Get temperature 
  tempC = sensors.getTempC(TempSensor);   // Save temperature

  Serial.print("Temp C: ");   
  Serial.println(tempC);                  // Serial print the degrees celcius - Temperature
  Serial.println("");

// Send data to Thingspeak via API

  if (client.connect(server, 80)) {       //   "184.106.153.149" or api.thingspeak.com  // Connect to the ThingsSpeak.com website via. API
    String postStr = apiKey;              // Build the update string
    postStr += "&field8=";                // Put "field(x)" Value here. Determines what field the data will be posted to.
    postStr += String(tempC);
    postStr += "\r\n\r\n";

    client.print("POST /update HTTP/1.1\n");
    
    Serial.print("POST update to Thingspeak");
    Serial.println("");
    
    client.print("Host: api.thingspeak.com\n");
    client.print("Connection: close\n");
    client.print("X-THINGSPEAKAPIKEY: " + apiKey + "\n");
    client.print("Content-Type: application/x-www-form-urlencoded\n");
    client.print("Content-Length: ");
    client.print(postStr.length());
    client.print("\n\n");
    client.print(postStr);
    
    Serial.print("String posted");
    Serial.println("");
     }

     else { 

     Serial.print("HTTP Connection failed");
     Serial.println("");
     Serial.println("ESP.restart");
     ESP.restart(); // Restart the ESP in case of bad connection
      
     }
     
     sent++;
     client.stop();
     Serial.print("Client Stop");
     Serial.println("");
      
     Serial.println("Deep sleep mode");
     Serial.println("");
     ESP.deepSleep(sleepTimeS*25000000, WAKE_RF_DEFAULT); // Sleep for x minute(s)  15000000 

  }
  }

